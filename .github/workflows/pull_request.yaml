name: pull_request

on: [pull_request]

jobs:

  eslint:
    name: Run TS Project eslint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [16.x, 18.x]

    steps:
      - name: Check out TS Project Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install TS Project dependencies
        run: npm ci

      - name: Build Lerna
        run: npx lerna run build

      - name: Run TS Project linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          # Enable linters
          eslint: true
          prettier: true
          eslint_extensions: ts

  openapi-lint:
    name: Run OpenAPI lint Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: [actiony, locky, registry]

    steps:
      - name: Check out TS Project Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install TS Project dependencies
        run: npm ci

      - name: Build Lerna
        run: npx lerna run build

      - name: OpenAPI Lint Checks
        uses: nwestfall/openapi-action@v1.0.2
        with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./packages/${{ matrix.package }}/openapi3.yaml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container: node:16

    strategy:
      matrix:
        node: [16.x]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Lerna
        run: npx lerna run build

      - name: Install pg client
        run: |
          apt-get update && apt-get install -y lsb-release curl ca-certificates gnupg
          curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
          sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          apt-get update
          apt-get install -y postgresql-client

      - name: Create schema
        run: psql -h postgres -d postgres -U postgres -c 'CREATE SCHEMA actiony; CREATE SCHEMA locky; CREATE SCHEMA registry;'
        env:
          PGPASSWORD: 1234

      - name: Run migrations
        run: npx lerna run migration:run
        env:
          DB_HOST: postgres
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: 1234

      - name: Run tests
        run: npx lerna run test

      - uses: actions/upload-artifact@v3
        with:
          name: Test Reporters
          path: packages/**/reports/**

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: [actiony, locky, registry]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: build Docker image
        run: docker build -f ./packages/${{ matrix.package }}/Dockerfile -t ${{ matrix.package }}:latest .

  build_commander_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: build commander Docker image
        run: docker build -f ./commander.Dockerfile -t arstotzka-commander:latest .
